
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND COLON DIVIDE EQUAL EQUALS HIGHER IF LOWER LPAREN MINUS NAME NUMBER OR PLUS PRINT RPAREN THEN TIMES start : linstlinst : linst inst \n            | inst inst : NAME EQUAL expression COLONinst : PRINT LPAREN expression RPAREN COLONexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression OR expression\n                  | expression AND expression\n                  | expression EQUALS expression\n                  | expression LOWER expression\n                  | expression HIGHER expression\n                  | expression DIVIDE expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : NAME'
    
_lr_action_items = {'NAME':([0,2,3,6,7,8,11,14,15,16,17,18,19,20,21,22,23,36,],[4,4,-3,-2,9,9,9,-4,9,9,9,9,9,9,9,9,9,-5,]),'PRINT':([0,2,3,6,14,36,],[5,5,-3,-2,-4,-5,]),'$end':([1,2,3,6,14,36,],[0,-1,-3,-2,-4,-5,]),'EQUAL':([4,],[7,]),'LPAREN':([5,7,8,11,15,16,17,18,19,20,21,22,23,],[8,11,11,11,11,11,11,11,11,11,11,11,11,]),'NUMBER':([7,8,11,15,16,17,18,19,20,21,22,23,],[12,12,12,12,12,12,12,12,12,12,12,12,]),'COLON':([9,10,12,25,26,27,28,29,30,31,32,33,34,35,],[-17,14,-16,36,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,]),'PLUS':([9,10,12,13,24,26,27,28,29,30,31,32,33,34,35,],[-17,15,-16,15,15,15,15,15,15,15,15,15,15,15,-15,]),'MINUS':([9,10,12,13,24,26,27,28,29,30,31,32,33,34,35,],[-17,16,-16,16,16,16,16,16,16,16,16,16,16,16,-15,]),'TIMES':([9,10,12,13,24,26,27,28,29,30,31,32,33,34,35,],[-17,17,-16,17,17,17,17,17,17,17,17,17,17,17,-15,]),'OR':([9,10,12,13,24,26,27,28,29,30,31,32,33,34,35,],[-17,18,-16,18,18,18,18,18,18,18,18,18,18,18,-15,]),'AND':([9,10,12,13,24,26,27,28,29,30,31,32,33,34,35,],[-17,19,-16,19,19,19,19,19,19,19,19,19,19,19,-15,]),'EQUALS':([9,10,12,13,24,26,27,28,29,30,31,32,33,34,35,],[-17,20,-16,20,20,20,20,20,20,20,20,20,20,20,-15,]),'LOWER':([9,10,12,13,24,26,27,28,29,30,31,32,33,34,35,],[-17,21,-16,21,21,21,21,21,21,21,21,21,21,21,-15,]),'HIGHER':([9,10,12,13,24,26,27,28,29,30,31,32,33,34,35,],[-17,22,-16,22,22,22,22,22,22,22,22,22,22,22,-15,]),'DIVIDE':([9,10,12,13,24,26,27,28,29,30,31,32,33,34,35,],[-17,23,-16,23,23,23,23,23,23,23,23,23,23,23,-15,]),'RPAREN':([9,12,13,24,26,27,28,29,30,31,32,33,34,35,],[-17,-16,25,35,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'linst':([0,],[2,]),'inst':([0,2,],[3,6,]),'expression':([7,8,11,15,16,17,18,19,20,21,22,23,],[10,13,24,26,27,28,29,30,31,32,33,34,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> linst','start',1,'p_start','main.py',70),
  ('linst -> linst inst','linst',2,'p_line','main.py',101),
  ('linst -> inst','linst',1,'p_line','main.py',102),
  ('inst -> NAME EQUAL expression COLON','inst',4,'p_statement_assign','main.py',110),
  ('inst -> PRINT LPAREN expression RPAREN COLON','inst',5,'p_statement_print','main.py',115),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','main.py',120),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','main.py',121),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','main.py',122),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','main.py',123),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','main.py',124),
  ('expression -> expression EQUALS expression','expression',3,'p_expression_binop','main.py',125),
  ('expression -> expression LOWER expression','expression',3,'p_expression_binop','main.py',126),
  ('expression -> expression HIGHER expression','expression',3,'p_expression_binop','main.py',127),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','main.py',128),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','main.py',133),
  ('expression -> NUMBER','expression',1,'p_expression_number','main.py',138),
  ('expression -> NAME','expression',1,'p_expression_name','main.py',144),
]
